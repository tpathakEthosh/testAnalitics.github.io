/**
 * Generated by Verge3D Puzzles v.3.6.1
 * Thu May 20 2021 15:27:46 GMT+0530 (India Standard Time)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.objClickInfo = [];
_pGlob.pickedObject = '';
_pGlob.objHoverInfo = [];
_pGlob.hoveredObject = '';
_pGlob.objMovementInfos = {};
_pGlob.objDragOverCallbacks = [];
_pGlob.objDragOverInfoByBlock = {}
_pGlob.dragMoveOrigins = {};
_pGlob.dragScaleOrigins = {};
_pGlob.mediaElements = {};
_pGlob.loadedFiles = {};
_pGlob.loadedFile = '';
_pGlob.promiseValue = '';
_pGlob.animMixerCallbacks = [];
_pGlob.arHitPoint = new v3d.Vector3(0, 0, 0);
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.animateParamUpdate = null;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.gamepadIndex = 0;

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();
_pGlob.intervals = {};

var _pPhysics = {};

_pPhysics.tickCallbacks = [];
_pPhysics.syncList = [];
_pPhysics.consList = [];

// internal info
_pPhysics.collisionData = [];

// goes to collision callback
_pPhysics.collisionInfo = {
    objectA: '',
    objectB: '',
    distance: 0,
    positionOnA: [0, 0, 0],
    positionOnB: [0, 0, 0],
    normalOnB: [0, 0, 0]
};

var _noWebAudioReported = false;
var _webAudioTinySynth = null;

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};



PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 worng behavior
            elem.setAttribute(attr, value);
        } else {
            elem[attr] = value;
        }
    }
}




// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = true;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {
  setHTMLElemStyle('backgroundImage', 'url("preloader.png")', 'v3d-simple-preloader-logo', false);
})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('innerHTML', ['',Math.round(_initGlob.percentage),'% '].join(''), 'loaderText', true);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  console.log('load');
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["resetLabelsInstructions"] = resetLabelsInstructions;
this.procedures["resetHandsandTubes"] = resetHandsandTubes;
this.procedures["resetAnimations"] = resetAnimations;
this.procedures["ResetBools"] = ResetBools;
this.procedures["stopAllHighlight"] = stopAllHighlight;
this.procedures["ResetChromeleanscreen"] = ResetChromeleanscreen;
this.procedures["Muteunmute"] = Muteunmute;
this.procedures["resetAudioVideo"] = resetAudioVideo;
this.procedures["highlightDrugsubstance"] = highlightDrugsubstance;
this.procedures["higlightFinpippete"] = higlightFinpippete;
this.procedures["highlightMixer"] = highlightMixer;
this.procedures["highlightShaker"] = highlightShaker;
this.procedures["highlightSyringe"] = highlightSyringe;
this.procedures["highlightVanquish"] = highlightVanquish;
this.procedures["stophighlightfinpip"] = stophighlightfinpip;
this.procedures["stopHighlightmixer"] = stopHighlightmixer;
this.procedures["stophighlighrDrugSubstance"] = stophighlighrDrugSubstance;
this.procedures["stopHighlightShaker"] = stopHighlightShaker;
this.procedures["stopHighlightVanquish"] = stopHighlightVanquish;
this.procedures["stophighlightSyringe"] = stophighlightSyringe;
this.procedures["samplePrep2"] = samplePrep2;

var PROC = {
    "resetLabelsInstructions": resetLabelsInstructions,
    "resetHandsandTubes": resetHandsandTubes,
    "resetAnimations": resetAnimations,
    "ResetBools": ResetBools,
    "stopAllHighlight": stopAllHighlight,
    "ResetChromeleanscreen": ResetChromeleanscreen,
    "Muteunmute": Muteunmute,
    "resetAudioVideo": resetAudioVideo,
    "highlightDrugsubstance": highlightDrugsubstance,
    "higlightFinpippete": higlightFinpippete,
    "highlightMixer": highlightMixer,
    "highlightShaker": highlightShaker,
    "highlightSyringe": highlightSyringe,
    "highlightVanquish": highlightVanquish,
    "stophighlightfinpip": stophighlightfinpip,
    "stopHighlightmixer": stopHighlightmixer,
    "stophighlighrDrugSubstance": stophighlighrDrugSubstance,
    "stopHighlightShaker": stopHighlightShaker,
    "stopHighlightVanquish": stopHighlightVanquish,
    "stophighlightSyringe": stophighlightSyringe,
    "samplePrep2": samplePrep2,
};

var startclick, appendstatus, Soverview, once, clickonsubmit, playFinpippete, playAnim1, SSamplePrep, playLabshakerAnim, EnableHomeButton, myTable, Baudplay, SsampleDetect, experienceStart, set, playSyringAnim, mixerAnimation, SDataanalysis, toggleAudio, playAud, Control, DrugSubsatnceBlink, FinPippeteBlink, MixerBlink, ShakerBlink, SyringeBlink, VanquishBlink, row, BaudioSource, playVanquishAnim, readReport, var1, createNewSeq, HighlightRecovery;


// everyFrame puzzle
function registerEveryFrame(callback) {
    if (typeof callback == "function")
        appInstance.renderCallbacks.push(callback);
}



// readCSV puzzle
function readCSV(text, delimit, from) {
    return v3d.CSVParser.parse(text,
        {delimiter: delimit, skipinitialrows: from});
}



// openWebPage puzzle
function openWebPage(url, mode) {

    if (appInstance && appInstance.controls) {
        appInstance.controls.forceMouseUp();
    }

    if (mode == "NEW") {
        window.open(url);
    } else if (mode == "NO_RELOAD") {
        history.pushState('verge3d state', 'verge3d page', url);
    } else {
        var target;
        switch (mode) {
            case "SAME":
                target = "_self";
                break;
            case "TOP":
                target = "_top";
                break;
            case "PARENT":
                target = "_parent";
                break;
        }
        if (typeof window.PE != "undefined") {
            if (window.confirm("Are you sure you want to leave Puzzles?"))
                window.open(url, target);
        } else {
            window.open(url, target);
        }
    }
}



// loadFile puzzle
function loadFile(url, callback) {

    var files = _pGlob.loadedFiles;

    if (!url || (typeof url != 'string')) {
        _pGlob.loadedFile = '';
        callback();
    } else if (url in files) {
        _pGlob.loadedFile = files[url];
        callback();
    } else {
        var loader = new v3d.FileLoader();
        loader.load(url,
            function(data) {
                _pGlob.loadedFile = data;
                callback();
            },
            function() {},
            function() {
                _pGlob.loadedFile = '';
                callback();
            }
        );
    }
}



// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback, false);
    }
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}


// Describe this function...
function resetLabelsInstructions() {
  setHTMLElemStyle('visibility', 'hidden', 'Vanquish_description', true);
  setHTMLElemStyle('visibility', 'hidden', 'Vanquish_label', true);
  setHTMLElemStyle('visibility', 'hidden', 'Nunc_label', true);
  setHTMLElemStyle('visibility', 'hidden', 'Finnpipette_label', true);
  setHTMLElemStyle('visibility', 'hidden', 'Orbital_label', true);
  setHTMLElemStyle('visibility', 'hidden', 'Centrifuge_label', true);
  setHTMLElemStyle('visibility', 'hidden', 'Titan_label', true);
  setHTMLElemStyle('visibility', 'hidden', 'Digital_label', true);
  setHTMLElemStyle('visibility', 'hidden', 'vial_instruction', true);
  setHTMLElemStyle('visibility', 'hidden', 'drug_instruction', true);
  setHTMLElemStyle('visibility', 'hidden', 'finnpipette_instruction', true);
  setHTMLElemStyle('visibility', 'hidden', 'product_instruction', true);
  setHTMLElemStyle('visibility', 'hidden', 'shaker_instruction', true);
  setHTMLElemStyle('visibility', 'hidden', 'syringe_instruction', true);
  setHTMLElemStyle('visibility', 'hidden', 'autosampler_instruction', true);
  setHTMLElemStyle('visibility', 'hidden', 'Chromeleon_label', true);
  setHTMLElemStyle('visibility', 'hidden', 'Substance_label', true);
  setHTMLElemStyle('visibility', 'hidden', 'Quantis_label', true);
  setHTMLElemStyle('visibility', 'hidden', 'Autosampler_ack_label', true);
  setHTMLElemStyle('visibility', 'hidden', 'mixing_ack_label', true);
  setHTMLElemStyle('visibility', 'hidden', 'transfer_ack_label', true);
  setHTMLElemStyle('visibility', 'hidden', 'homogenized_ack_label', true);
  setHTMLElemStyle('visibility', 'hidden', 'Product_label', true);
  setHTMLElemStyle('visibility', 'hidden', 'Drug_label', true);
  setHTMLElemStyle('visibility', 'hidden', 'Blank_label_v2', true);
  setHTMLElemStyle('visibility', 'hidden', 'Mobile_label', true);
  setHTMLElemStyle('visibility', 'hidden', 'Standard_label', true);
  setHTMLElemStyle('visibility', 'hidden', 'Drug_label_v3', true);
  setHTMLElemStyle('visibility', 'hidden', 'Blank_label', true);
  setHTMLElemStyle('visibility', 'hidden', 'Substance_label_v21', true);
  setHTMLElemStyle('visibility', 'hidden', 'Drug_label_v21', true);
  setHTMLElemStyle('visibility', 'hidden', 'Substance_label_v31', true);
  setHTMLElemStyle('display', 'none', 'startPage', true);
  setHTMLElemStyle('display', 'block', 'footer_div', true);
}



// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return (obj.type !== "AmbientLight" && obj.name !== ""
            && !(obj.isMesh && obj.isMaterialGeneratedMesh));
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc;
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// show and hide puzzles
function changeVis(objNames, bool) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}


// Describe this function...
function resetHandsandTubes() {
  changeVis('Anim_Finnpipette_LH', false);
  changeVis('Anim_Finnpipette_RH', false);
  changeVis('Anim_Syringe_RH', false);
  changeVis('Anim_Syringe_LH', false);
  changeVis('Anim_DrugSubstance_LH', false);
  changeVis('Anim_DrugSubstance_RH', false);
  changeVis('Anim_Mixer_RH', false);
  changeVis('Anim_Shaker_RH', false);
  changeVis('Anim_Vanquish_RH', false);
  changeVis(['GROUP', 'Syringe_Tubes'], false);
  changeVis(['GROUP', 'vortex_mixer_Tubes'], false);
  changeVis('create_seq_1', false);
  changeVis('create_seq_2', false);
  changeVis('red_report_1', false);
  changeVis('red_report_2', false);
  changeVis('submit_1', false);
  changeVis('run', false);
  changeVis('submit_2', false);
  // All anim objects hide
  changeVis('Anim_Finnpipette_Tube', false);
  changeVis('Anim_Finnpipette_TubeCap', false);
  changeVis('Anim_Finnpipette_TubeLiquid', false);
  changeVis('Anim_Mixer_Tube', false);
  changeVis('Anim_Mixer_TubeCap', false);
  changeVis('Anim_Mixer_TubeLiquid', false);
  changeVis('Anim_Shaker_Tube', false);
  changeVis('Anim_Shaker_TubeCap', false);
  changeVis('Anim_Shaker_TubeLiquid', false);
  changeVis('Anim_Syringe_Tube', false);
  changeVis('Anim_Syringe_TubeCap', false);
  changeVis('Anim_Syringe_TubeLiquid', false);
  changeVis('Drug Substance 3', false);
}


// getAnimations puzzle
function getAnimations(objNames) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    var animations = [];
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        // use objName as animName - for now we have one-to-one match
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, objName);
        if (action)
            animations.push(objName);
    }
    return animations;
}



/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}



/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();



// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, isPlayAnimCompat, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                // compatibility reasons: deprecated playAnimation puzzles don't
                // change repetitions
                if (!isPlayAnimCompat) {
                    action.repetitions = Infinity;
                }

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}


// Describe this function...
function resetAnimations() {

  operateAnimation('STOP', getAnimations(['GROUP', 'Anim_DrugSubstance']), null, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('STOP', getAnimations(['GROUP', 'Anim_Finnpipette']), null, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('STOP', getAnimations(['GROUP', 'Anim_Mixer']), null, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('STOP', getAnimations(['GROUP', 'Anim_Shaker']), null, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('STOP', getAnimations(['GROUP', 'Anim_Syringe']), null, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('STOP', getAnimations(['GROUP', 'Anim_Vanquish']), null, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('STOP', getAnimations(['GROUP', 'Anim_Vanquish']), null, null, 'AUTO', 1,
          function() {}, undefined, false);

      }

// Describe this function...
function ResetBools() {
  playAnim1 = 'false';
  playFinpippete = 'false';
  mixerAnimation = 'false';
  playLabshakerAnim = 'false';
  playSyringAnim = 'false';
  playVanquishAnim = 'false';
  readReport = 'false';
  createNewSeq = 'false';
  clickonsubmit = 'false';
  DrugSubsatnceBlink = false;
  FinPippeteBlink = false;
  MixerBlink = false;
  ShakerBlink = false;
  SyringeBlink = false;
  VanquishBlink = false;
  HighlightRecovery = false;
}


// removeTimer puzzle
function registerRemoveTimer(id) {
    if (id in _pGlob.intervals) {
        window.clearInterval(_pGlob.intervals[id]);
    }
}


// Describe this function...
function stopAllHighlight() {
  stophighlighrDrugSubstance();
  stophighlightfinpip();
  stopHighlightmixer();
  stopHighlightShaker();
  stophighlightSyringe();
  stopHighlightVanquish();
  registerRemoveTimer('t1');
  registerRemoveTimer('t2');
  registerRemoveTimer('t3');
  registerRemoveTimer('t4');
  registerRemoveTimer('t5');
  registerRemoveTimer('t6');
  registerRemoveTimer('t7');
  registerRemoveTimer('t8');
  registerRemoveTimer('t9');
  registerRemoveTimer('t10');
  registerRemoveTimer('t11');
  registerRemoveTimer('t12');
  registerRemoveTimer('t13');
  registerRemoveTimer('t14');
  registerRemoveTimer('t15');
  registerRemoveTimer('t16');
  registerRemoveTimer('t17');
  registerRemoveTimer('t18');
  registerRemoveTimer('t19');
  registerRemoveTimer('t20');
  registerRemoveTimer('t21');
  registerRemoveTimer('t22');
  registerRemoveTimer('t23');
  registerRemoveTimer('t24');
  registerRemoveTimer('t25');
  registerRemoveTimer('t26');
  registerRemoveTimer('t27');
  registerRemoveTimer('t28');
  registerRemoveTimer('t29');
  registerRemoveTimer('t30');
  registerRemoveTimer('t31');
  registerRemoveTimer('t32');
  registerRemoveTimer('t33');
  registerRemoveTimer('t34');
  registerRemoveTimer('t35');
  registerRemoveTimer('t36');
  registerRemoveTimer('t37');
  registerRemoveTimer('t38');
  registerRemoveTimer('t39');
  registerRemoveTimer('t40');
  registerRemoveTimer('t41');
  registerRemoveTimer('t42');
  registerRemoveTimer('t43');
  registerRemoveTimer('t44');
  registerRemoveTimer('t45');
  registerRemoveTimer('t46');
  registerRemoveTimer('t47');
  registerRemoveTimer('t48');
  registerRemoveTimer('t49');
  registerRemoveTimer('t50');
  registerRemoveTimer('t51');
  registerRemoveTimer('t52');
  registerRemoveTimer('t53');
  registerRemoveTimer('t54');
  registerRemoveTimer('t55');
  registerRemoveTimer('t56');
  registerRemoveTimer('t57');
  registerRemoveTimer('t58');
  registerRemoveTimer('t59');
  registerRemoveTimer('t60');
  registerRemoveTimer('t61');
  registerRemoveTimer('t62');
  registerRemoveTimer('t0');
  registerRemoveTimer('h1timer');
  registerRemoveTimer('h2timer');
  registerRemoveTimer('h3timer');
  registerRemoveTimer('h4timer');
  registerRemoveTimer('h5timer');
  registerRemoveTimer('h6timer');
  registerRemoveTimer('h7timer');
  registerRemoveTimer('h8timer');
  registerRemoveTimer('h9timer');
  registerRemoveTimer('h10timer');
  registerRemoveTimer('h11timer');
  registerRemoveTimer('h12timer');
  registerRemoveTimer('1t');
  registerRemoveTimer('2t');
  registerRemoveTimer('3t');
  registerRemoveTimer('4t');
  registerRemoveTimer('5t');
  registerRemoveTimer('ct1');
  registerRemoveTimer('ct2');
  registerRemoveTimer('ct3');
  registerRemoveTimer('ct4');
  registerRemoveTimer('ct5');
  registerRemoveTimer('trans1Timer');
  registerRemoveTimer('trans2Timer');
  registerRemoveTimer('trans3Timer');
  registerRemoveTimer('trans4Timer');
  registerRemoveTimer('trans5Timer');
  registerRemoveTimer('trans6Timer');
  registerRemoveTimer('trans7Timer');
  registerRemoveTimer('rpm1');
  registerRemoveTimer('rpm2');
}


// soundVideoMute puzzle
function soundVideoMute(mediaElem) {
    if (!mediaElem) {
        return;
    }
    mediaElem.setMuted(true);
}



// playSound puzzle
function playSound(mediaElem, loop) {
    if (!mediaElem)
        return;
    mediaElem.setLoop(loop);
    mediaElem.play();
}



// volume puzzle
function volume(mediaElem, volume) {
    if (!mediaElem)
        return;

    volume = Number(volume);
    if (Number.isNaN(volume)) {
        return;
    }

    mediaElem.setVolume(v3d.Math.clamp(volume, 0.0, 1.0));
}



// soundVideoUnmute puzzle
function soundVideoUnmute(mediaElem) {
    if (!mediaElem) {
        return;
    }
    mediaElem.setMuted(false);
}



// setActiveCamera puzzle
function setActiveCamera(camName) {
    var camera = getObjectByName(camName);
    if (!camera || !camera.isCamera || appInstance.camera == camera)
        return;
    appInstance.setCamera(camera);
}




/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = appInstance.camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (appInstance.camera.parent) {
            appInstance.camera.parent.worldToLocal(worldPos);
        }
        appInstance.camera.position.copy(worldPos);
        appInstance.camera.lookAt(worldTarget);
        doSlot();
    }
}



// setTimer puzzle
function registerSetTimer(id, timeout, callback, repeat) {

    if (id in _pGlob.intervals) {
        window.clearInterval(_pGlob.intervals[id]);
    }

    _pGlob.intervals[id] = window.setInterval(function() {
        if (repeat-- > 0) {
            callback(_pGlob.intervals[id]);
        }
    }, 1000 * timeout);
}




// bindHTMLObject puzzle
function bindHTMLObject(objName, id, isParent) {
    if (!objName)
        return;
    var elem = getElement(id, isParent);
    if (!elem)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;
    var projected = new v3d.Vector3();
    elem.style.top = 0;
    elem.style.left = 0;
    appInstance.renderCallbacks.push(function() {
        appInstance.camera.updateMatrixWorld();
        obj.getWorldPosition(projected).project(appInstance.camera);
        projected.x = (0.5 + projected.x / 2) * appInstance.container.offsetWidth;
        projected.y = (0.5 - projected.y / 2) * appInstance.container.offsetHeight;
        elem.style.transform = "translate(" + projected.x + "px, " + projected.y + "px)";
    });
}



// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}



// appendScene puzzle
function appendScene(url, sceneName, loadCameras, loadLights, loadCb, progCb, errorCb) {
    _pGlob.percentage = 0;

    appInstance.appendScene(url, function(loadedScene) {
        loadedScene.name = sceneName;
        _pGlob.percentage = 100;
        loadCb();
    }, function(percentage) {
        _pGlob.percentage = percentage;
        progCb();
    }, errorCb, loadCameras, loadLights);
}



/**
 * Retreive standard accessible textures for MeshNodeMaterial or MeshStandardMaterial.
 * If "collectSameNameMats" is true then all materials in the scene with the given name will
 * be used for collecting textures, otherwise will be used only the first found material (default behavior).
 */
function matGetEditableTextures(matName, collectSameNameMats) {

    var mats = [];
    if (collectSameNameMats) {
        mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
    } else {
        var firstMat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
        if (firstMat !== null) {
            mats = [firstMat];
        }
    }

    var textures = mats.reduce(function(texArray, mat) {
        var matTextures = [];
        switch (mat.type) {
            case 'MeshNodeMaterial':
                matTextures = Object.values(mat.nodeTextures);
                break;

            case 'MeshStandardMaterial':
                matTextures = [
                    mat.map, mat.lightMap, mat.aoMap, mat.emissiveMap,
                    mat.bumpMap, mat.normalMap, mat.displacementMap,
                    mat.roughnessMap, mat.metalnessMap, mat.alphaMap, mat.envMap
                ]
                break;

            default:
                console.error('matGetEditableTextures: Unknown material type ' + mat.type);
                break;
        }

        Array.prototype.push.apply(texArray, matTextures);
        return texArray;
    }, []);

    return textures.filter(function(elem) {
        // check Texture type exactly
        return elem && (elem.constructor == v3d.Texture
                || elem.constructor == v3d.DataTexture
                || elem.constructor == v3d.VideoTexture);
    });
}



/**
 * Replace accessible textures for MeshNodeMaterial or MeshStandardMaterial
 */
function matReplaceEditableTexture(mat, oldTex, newTex) {

    switch (mat.type) {
        case 'MeshNodeMaterial':
            for (var name in mat.nodeTextures) {
                if (mat.nodeTextures[name] == oldTex) {
                    mat.nodeTextures[name] = newTex;
                }
            }

            break;

        case 'MeshStandardMaterial':

            var texNames = ['map', 'lightMap', 'aoMap', 'emissiveMap',
                            'bumpMap', 'normalMap', 'displacementMap', 'roughnessMap',
                            'metalnessMap', 'alphaMap', 'envMap'];

            texNames.forEach(function(name) {
                if (mat[name] == oldTex) {
                    mat[name] = newTex;
                }
            });

            break;

        default:
            console.error('matReplaceEditableTexture: Unsupported material type ' + mat.type);
            break;
    }

}



// replaceTexture puzzle
function replaceTexture(matName, texName, texUrlOrElem, doCb) {

    var textures = matGetEditableTextures(matName, true).filter(function(elem) {
        return elem.name == texName;
    });

    if (!textures.length)
        return;

    if (texUrlOrElem instanceof Promise) {

        texUrlOrElem.then(function(response) {
           processImageUrl(response);
        }, function(error) {});

    } else if (typeof texUrlOrElem == 'string') {

        processImageUrl(texUrlOrElem);

    /**
     * NOTE: not checking for the MediaHTML5 constructor, because otherwise this
     * puzzle would always provide the code that's not needed most of the time
     */
    } else if (texUrlOrElem instanceof Object && texUrlOrElem.source
            instanceof HTMLVideoElement) {

        processVideo(texUrlOrElem.source);

    } else if (texUrlOrElem instanceof HTMLCanvasElement) {

        processCanvas(texUrlOrElem);

    } else {

        return;

    }

    function processImageUrl(url) {

        var isHDR = (url.search(/\.hdr$/) > 0);

        if (!isHDR) {
            var loader = new v3d.ImageLoader();
            loader.setCrossOrigin('Anonymous');
        } else {
            var loader = new v3d.FileLoader();
            loader.setResponseType('arraybuffer');
        }

        loader.load(url, function(image) {
            // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
            var isJPEG = url.search(/\.(jpg|jpeg)$/) > 0 || url.search(/^data\:image\/jpeg/) === 0;

            textures.forEach(function(elem) {

                if (!isHDR) {
                    elem.image = image;
                } else {
                    // parse loaded HDR buffer
                    var rgbeLoader = new v3d.RGBELoader();
                    var texData = rgbeLoader.parse(image);

                    // NOTE: reset params since the texture may be converted to float
                    elem.type = v3d.UnsignedByteType;
                    elem.encoding = v3d.RGBEEncoding;

                    elem.image = {
                        data: texData.data,
                        width: texData.width,
                        height: texData.height
                    }

                    elem.magFilter = v3d.LinearFilter;
                    elem.minFilter = v3d.LinearFilter;
                    elem.generateMipmaps = false;
                    elem.isDataTexture = true;

                }

                elem.format = isJPEG ? v3d.RGBFormat : v3d.RGBAFormat;
                elem.needsUpdate = true;

                // update world material if it is using this texture
                var wMat = appInstance.worldMaterial;
                if (wMat)
                    for (var texName in wMat.nodeTextures)
                        if (wMat.nodeTextures[texName] == elem)
                            appInstance.updateEnvironment(wMat);

            });

            // exec once
            doCb();

        });
    }

    function processVideo(elem) {
        var videoTex = new v3d.VideoTexture(elem);
        videoTex.flipY = false;
        videoTex.name = texName;

        var videoAssigned = false;

        var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        mats.forEach(function(mat) {

            textures.forEach(function(tex) {
                matReplaceEditableTexture(mat, tex, videoTex);
            });

            mat.needsUpdate = true;
            videoAssigned = true;
        });

        if (videoAssigned)
            doCb();

    }

    function processCanvas(elem) {
        var canvasTex = new v3d.CanvasTexture(elem);
        canvasTex.flipY = false;
        canvasTex.name = texName;

        var canvasAssigned = false;

        var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        mats.forEach(function(mat) {

            textures.forEach(function(tex) {
                matReplaceEditableTexture(mat, tex, canvasTex);
            });

            mat.needsUpdate = true;
            canvasAssigned = true;
        });

        if (canvasAssigned) {

            if (v3d.PL) {
                v3d.PL.canvasTextures = v3d.PL.canvasTextures || {};
                v3d.PL.canvasTextures[canvasTex.image.id] = canvasTex;
            }

            doCb();
        }

    }
}


// Describe this function...
function ResetChromeleanscreen() {
  replaceTexture('Vanquish-Screen-01', 'SD_1@2x.png', 'data analysis and interpretation UI screens/DA_1@3x.png', function() {});
}

// Describe this function...
function Muteunmute() {
  if (toggleAudio == 'true') {
    soundVideoMute(playAud);
  } else {
    soundVideoUnmute(playAud);
  }
}


// stopSound puzzle
function stopSound(mediaElem) {
    if (!mediaElem) {
        return;
    }
    mediaElem.stop();
}


// Describe this function...
function resetAudioVideo() {
  stopSound(set);
  stopSound(playAud);
  replaceTexture('pc_screen.002', 'TV-SCREEN.jpg', 'Models/TV-SCREEN.jpg', function() {});
}

// Describe this function...
function highlightDrugsubstance() {
}

// Describe this function...
function higlightFinpippete() {
}

// Describe this function...
function highlightMixer() {
}

// Describe this function...
function highlightShaker() {
}

// Describe this function...
function highlightSyringe() {
}


// outline puzzle
function outline(objNames, doWhat) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}



// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {
        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.camera);
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



// whenHovered puzzle
initObjectPicking(function(intersects, event) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = '';

    // search for closest hovered object

    var lastIntersectIndex = Infinity;
    _pGlob.objHoverInfo.forEach(function(el) {
        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj(el.objNames, objName) && i <= lastIntersectIndex) {
                currHovered = objName;
                lastIntersectIndex = i;
            }
        }
    });

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(el.objNames, prevHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1](event);
        }
    });

    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(el.objNames, currHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0](event);
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove', false);



// whenHovered puzzle
function registerOnHover(objNames, xRay, cbOver, cbOut) {
    objNames = retrieveObjectNames(objNames) || [];
    var objNamesFiltered = objNames.filter(function(name) {
        return name;
    });

    _pGlob.objHoverInfo.push({
        objNames: objNamesFiltered,
        callbacks: [cbOver, cbOut],
        xRay: xRay
    });
}


// Describe this function...
function highlightVanquish() {
}

// Describe this function...
function stophighlightfinpip() {
  outline('PipetteBody', 'DISABLE');
  outline('PipetteTipEjector', 'DISABLE');
  outline('PipetteButton', 'DISABLE');
}

// Describe this function...
function stopHighlightmixer() {
  outline('Anim_Mixer_TubeCap', 'DISABLE');
  outline('Anim_Mixer_Tube', 'DISABLE');
}

// Describe this function...
function stophighlighrDrugSubstance() {
  outline('Drug Substance Bottle 1 lable.001', 'DISABLE');
  outline('Drug Substance cap 1.001', 'DISABLE');
}

// Describe this function...
function stopHighlightShaker() {
  outline('Anim_Shaker_Tube', 'DISABLE');
  outline('Anim_Shaker_TubeCap', 'DISABLE');
}

// Describe this function...
function stopHighlightVanquish() {
  outline('Door_1_trans_net', 'DISABLE');
}

// Describe this function...
function stophighlightSyringe() {
  outline('Injection body', 'DISABLE');
  outline('injection plunger', 'DISABLE');
}


function MediaHTML5(isVideo) {
    this.source = null;
}

Object.assign(MediaHTML5.prototype, {

    load: function(url, isVideo) {
        if (isVideo) {
            this.source = document.createElement('video');
            this.source.playsInline = true;
            this.source.preload = 'auto';
            this.source.autoload = true;
            this.source.crossOrigin = 'anonymous';
        } else {
            this.source = document.createElement('audio');
        }

        this.source.src = url;
        return this;
    },

    play: function() {
        this.source.play();
    },

    pause: function() {
        this.source.pause();
    },

    stop: function() {
        this.source.pause();
        this.source.currentTime = 0;
    },

    rewind: function() {
        this.source.currentTime = 0;
    },

    setPlaybackRate: function(rate) {
        this.source.playbackRate = rate;
    },

    isPlaying: function() {
        return this.source.duration > 0 && !this.source.paused;
    },

    setLoop: function(looped) {
        this.source.loop = looped;
    },

    setVolume: function(volume) {
        this.source.volume = volume;
    },

    setMuted: function(muted) {
        this.source.muted = muted;
    },

});



// loadMedia puzzle
function loadMedia_HTML5(url) {

    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new MediaHTML5().load(url);
    }
    return elems[url];
}



// whenClicked puzzle
function registerOnClick(objNames, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {
    objNames = retrieveObjectNames(objNames) || [];

    var objNamesFiltered = objNames.filter(function(name) {
        return name;
    });

    // for AR/VR
    _pGlob.objClickInfo.push({
        objNames: objNamesFiltered,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj(objNamesFiltered, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }

        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}


// Describe this function...
function samplePrep2() {
  registerSetTimer('t47', 1, function() {
    Muteunmute();
    playAud = loadMedia_HTML5('Nitrosamine_VOs/VO_1_c.mp3');
    playSound(playAud, false);
    registerSetTimer('trans2Timer', 2.2, function() {
      resetAudioVideo();
      ResetBools();
      ResetChromeleanscreen();
      resetHandsandTubes();
      resetLabelsInstructions();
      resetAnimations();
      stopAllHighlight();
      changeVis('Anim_DrugSubstance_Tube', true);
      changeVis('Anim_DrugSubstance_TubeCap', true);
      registerSetTimer('t0', 1, function() {
        registerSetTimer('t50', 1, function() {
          playAud = loadMedia_HTML5('Nitrosamine_VOs/VO_3.mp3');
          playSound(playAud, false);
          Muteunmute();
          registerSetTimer('t1', 1, function() {
            setHTMLElemStyle('visibility', 'visible', 'Drug_label', true);
          }, 1);
          registerSetTimer('t2', 7, function() {
            Muteunmute();
            playAud = loadMedia_HTML5('Nitrosamine_VOs/VO_4.mp3');
            playSound(playAud, false);
            Muteunmute();
            setHTMLElemStyle('visibility', 'hidden', 'Nunc_label', true);
            // Click on drug substance vial
            setHTMLElemStyle('visibility', 'visible', 'vial_instruction', true);
            Muteunmute();
            registerSetTimer('ct1', 3, function() {
              playAnim1 = 'true';
              DrugSubsatnceBlink = true;
              highlightDrugsubstance();
            }, Infinity);
          }, 1);
          registerSetTimer('t3', 2, function() {
            setHTMLElemStyle('visibility', 'visible', 'Substance_label', true);
            setHTMLElemStyle('visibility', 'hidden', 'Drug_label', true);
          }, 1);
          registerSetTimer('t4', 5, function() {
            setHTMLElemStyle('visibility', 'visible', 'Nunc_label', true);
            // Hide DrugSubstance
            setHTMLElemStyle('visibility', 'hidden', 'Substance_label', true);
          }, 1);
        }, 1);
      }, 1);
    }, 1);
  }, 1);
  Control = 'false';
}


registerEveryFrame(function() {
  var VARS = Object.defineProperties({}, {
    "startclick": { get: function() { return startclick; }, set: function(val) { startclick = val; } },
    "appendstatus": { get: function() { return appendstatus; }, set: function(val) { appendstatus = val; } },
    "Soverview": { get: function() { return Soverview; }, set: function(val) { Soverview = val; } },
    "once": { get: function() { return once; }, set: function(val) { once = val; } },
    "clickonsubmit": { get: function() { return clickonsubmit; }, set: function(val) { clickonsubmit = val; } },
    "playAnim1": { get: function() { return playAnim1; }, set: function(val) { playAnim1 = val; } },
    "SSamplePrep": { get: function() { return SSamplePrep; }, set: function(val) { SSamplePrep = val; } },
    "EnableHomeButton": { get: function() { return EnableHomeButton; }, set: function(val) { EnableHomeButton = val; } },
    "playFinpippete": { get: function() { return playFinpippete; }, set: function(val) { playFinpippete = val; } },
    "myTable": { get: function() { return myTable; }, set: function(val) { myTable = val; } },
    "Baudplay": { get: function() { return Baudplay; }, set: function(val) { Baudplay = val; } },
    "SsampleDetect": { get: function() { return SsampleDetect; }, set: function(val) { SsampleDetect = val; } },
    "experienceStart": { get: function() { return experienceStart; }, set: function(val) { experienceStart = val; } },
    "set": { get: function() { return set; }, set: function(val) { set = val; } },
    "mixerAnimation": { get: function() { return mixerAnimation; }, set: function(val) { mixerAnimation = val; } },
    "SDataanalysis": { get: function() { return SDataanalysis; }, set: function(val) { SDataanalysis = val; } },
    "toggleAudio": { get: function() { return toggleAudio; }, set: function(val) { toggleAudio = val; } },
    "playAud": { get: function() { return playAud; }, set: function(val) { playAud = val; } },
    "Control": { get: function() { return Control; }, set: function(val) { Control = val; } },
    "DrugSubsatnceBlink": { get: function() { return DrugSubsatnceBlink; }, set: function(val) { DrugSubsatnceBlink = val; } },
    "FinPippeteBlink": { get: function() { return FinPippeteBlink; }, set: function(val) { FinPippeteBlink = val; } },
    "MixerBlink": { get: function() { return MixerBlink; }, set: function(val) { MixerBlink = val; } },
    "ShakerBlink": { get: function() { return ShakerBlink; }, set: function(val) { ShakerBlink = val; } },
    "SyringeBlink": { get: function() { return SyringeBlink; }, set: function(val) { SyringeBlink = val; } },
    "VanquishBlink": { get: function() { return VanquishBlink; }, set: function(val) { VanquishBlink = val; } },
    "playLabshakerAnim": { get: function() { return playLabshakerAnim; }, set: function(val) { playLabshakerAnim = val; } },
    "row": { get: function() { return row; }, set: function(val) { row = val; } },
    "BaudioSource": { get: function() { return BaudioSource; }, set: function(val) { BaudioSource = val; } },
    "playSyringAnim": { get: function() { return playSyringAnim; }, set: function(val) { playSyringAnim = val; } },
    "playVanquishAnim": { get: function() { return playVanquishAnim; }, set: function(val) { playVanquishAnim = val; } },
    "readReport": { get: function() { return readReport; }, set: function(val) { readReport = val; } },
    "var1": { get: function() { return var1; }, set: function(val) { var1 = val; } },
    "createNewSeq": { get: function() { return createNewSeq; }, set: function(val) { createNewSeq = val; } },
    "HighlightRecovery": { get: function() { return HighlightRecovery; }, set: function(val) { HighlightRecovery = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', (('// Built-in variables: app, v3d, VARS, PROC' + '\n' +
  'app.controls.enabled=false;')))(appInstance, v3d, VARS, PROC);

});

eventHTMLElem('click', 'home', false, function(event) {
  loadFile('./links1.csv', function() {
    myTable = readCSV(_pGlob.loadedFile, ',', 0);
    console.log(_pGlob.loadedFile);
    for (var row_index in myTable) {
      row = myTable[row_index];
      if (row[0] == 'Overview') {
        var1 = row.slice(-1)[0];
        console.log(['"',var1,'"'].join(''));
        openWebPage(['',var1,''].join(''), 'SAME');
      }
    }
  });
});

setHTMLElemStyle('visibility', 'hidden', 'Vanquish_description', true);
setHTMLElemStyle('visibility', 'hidden', 'Vanquish_label', true);
setHTMLElemStyle('visibility', 'hidden', 'Nunc_label', true);
setHTMLElemStyle('visibility', 'hidden', 'Finnpipette_label', true);
setHTMLElemStyle('visibility', 'hidden', 'Orbital_label', true);
setHTMLElemStyle('visibility', 'hidden', 'Centrifuge_label', true);
setHTMLElemStyle('visibility', 'hidden', 'Titan_label', true);
setHTMLElemStyle('visibility', 'hidden', 'Digital_label', true);
setHTMLElemStyle('visibility', 'hidden', 'vial_instruction', true);
setHTMLElemStyle('visibility', 'hidden', 'finnpipette_instruction', true);
setHTMLElemStyle('visibility', 'hidden', 'product_instruction', true);
setHTMLElemStyle('visibility', 'hidden', 'shaker_instruction', true);
setHTMLElemStyle('visibility', 'hidden', 'syringe_instruction', true);
setHTMLElemStyle('visibility', 'hidden', 'autosampler_instruction', true);
setHTMLElemStyle('visibility', 'hidden', 'Chromeleon_label', true);
setHTMLElemStyle('visibility', 'hidden', 'Substance_label', true);
setHTMLElemStyle('visibility', 'hidden', 'Quantis_label', true);
setHTMLElemStyle('visibility', 'hidden', 'Autosampler_ack_label', true);
setHTMLElemStyle('visibility', 'hidden', 'mixing_ack_label', true);
setHTMLElemStyle('visibility', 'hidden', 'transfer_ack_label', true);
setHTMLElemStyle('visibility', 'hidden', 'homogenized_ack_label', true);
setHTMLElemStyle('visibility', 'hidden', 'Product_label', true);
setHTMLElemStyle('display', 'block', 'LoadingPage', true);
setHTMLElemStyle('visibility', 'hidden', 'Drug_label', true);
setHTMLElemStyle('display', 'none', 'startPage', true);
setHTMLElemStyle('visibility', 'hidden', 'Blank_label_v2', true);
setHTMLElemStyle('visibility', 'hidden', 'Mobile_label', true);
setHTMLElemStyle('visibility', 'hidden', 'Standard_label', true);
setHTMLElemStyle('visibility', 'hidden', 'Drug_label_v3', true);
setHTMLElemStyle('visibility', 'hidden', 'Blank_label', true);
setHTMLElemStyle('visibility', 'hidden', 'Substance_label_v21', true);
setHTMLElemStyle('visibility', 'hidden', 'Drug_label_v21', true);
setHTMLElemStyle('visibility', 'hidden', 'Substance_label_v31', true);

eventHTMLElem('click', 'button_SamplePrepAndDetec', true, function(event) {
  loadFile('./links1.csv', function() {
    myTable = readCSV(_pGlob.loadedFile, ',', 0);
    console.log(_pGlob.loadedFile);
    for (var row_index2 in myTable) {
      row = myTable[row_index2];
      if (row[0] == 'SampleDetect') {
        var1 = row.slice(-1)[0];
        console.log(['"',var1,'"'].join(''));
        openWebPage(['',var1,''].join(''), 'SAME');
      }
    }
  });
});
eventHTMLElem('click', 'button_DataAnalysis', true, function(event) {
  loadFile('./links1.csv', function() {
    myTable = readCSV(_pGlob.loadedFile, ',', 0);
    console.log(_pGlob.loadedFile);
    for (var row_index3 in myTable) {
      row = myTable[row_index3];
      if (row[0] == 'DataAnalysis') {
        var1 = row.slice(-1)[0];
        console.log(['"',var1,'"'].join(''));
        openWebPage(['',var1,''].join(''), 'SAME');
      }
    }
  });
});
eventHTMLElem('click', 'button_overview', false, function(event) {
  loadFile('./links1.csv', function() {
    myTable = readCSV(_pGlob.loadedFile, ',', 0);
    console.log(_pGlob.loadedFile);
    for (var row_index4 in myTable) {
      row = myTable[row_index4];
      if (row[0] == 'Overview') {
        var1 = row.slice(-1)[0];
        console.log(['"',var1,'"'].join(''));
        openWebPage(['',var1,''].join(''), 'SAME');
      }
    }
  });
});

eventHTMLElem('click', 'volume_btn', false, function(event) {
  if (Baudplay == 'true') {
    setHTMLElemStyle('backgroundImage', 'url("assets/img/vol_off.svg")', 'volume_btn', true);
    soundVideoMute(BaudioSource);
    Baudplay = 'false';
    soundVideoMute(playAud);
    soundVideoMute(set);
    toggleAudio = 'true';
  } else {
    Baudplay = 'true';
    setHTMLElemStyle('backgroundImage', 'url("assets/img/vol_on.svg")', 'volume_btn', true);
    playSound(BaudioSource, true);
    volume(BaudioSource, 0.04);
    soundVideoUnmute(BaudioSource);
    soundVideoUnmute(playAud);
    soundVideoUnmute(set);
    toggleAudio = 'false';
  }
});

appendstatus = 0;
appendScene('Models/Thermo_Lab_Locator.gltf', 'Models/Thermo_Lab_Locator.gltf', true, false, function() {
  appendstatus = (typeof appendstatus == 'number' ? appendstatus : 0) + 1;
  setActiveCamera('Main_Camera');
  console.log('locatorloaded');
  appendScene('Models/Nitrosamine_Lables.gltf', 'Models/Nitrosamine_Lables.gltf', false, false, function() {
    console.log('LabelsLoaded');
    appendstatus = (typeof appendstatus == 'number' ? appendstatus : 0) + 1;
    appendScene('Models/Nitrosamine_Instructionss.gltf', 'Models/Nitrosamine_Instructionss.gltf', false, false, function() {
      console.log('InstLoaded');
      appendstatus = (typeof appendstatus == 'number' ? appendstatus : 0) + 1;
      setHTMLElemStyle('display', 'none', 'loader_container', true);
      tweenCamera('Sample_Preparation_Animation_1_Position', 'Sample_Preparation_Animation_1_Target', 0, function() {}, 0);
      // All anim objects hide
      changeVis('Anim_Finnpipette_Tube', false);
      changeVis('Anim_Finnpipette_TubeCap', false);
      changeVis('Anim_Finnpipette_TubeLiquid', false);
      changeVis('Anim_Mixer_Tube', false);
      changeVis('Anim_Mixer_TubeCap', false);
      changeVis('Anim_Mixer_TubeLiquid', false);
      changeVis('Anim_Shaker_Tube', false);
      changeVis('Anim_Shaker_TubeCap', false);
      changeVis('Anim_Shaker_TubeLiquid', false);
      changeVis('Anim_Syringe_Tube', false);
      changeVis('Anim_Syringe_TubeCap', false);
      changeVis('Anim_Syringe_TubeLiquid', false);
      changeVis('Drug Substance 3', false);
      changeVis('Prefill', false);
      changeVis('Anim_Finnpipette_RH', false);
      changeVis('Anim_Finnpipette_LH', false);
      changeVis('Anim_DrugSubstance_RH', false);
      changeVis('Anim_DrugSubstance_LH', false);
      changeVis('Anim_Shaker_RH', false);
      changeVis('Anim_Mixer_RH', false);
      changeVis('Anim_Syringe_LH', false);
      changeVis('Anim_Syringe_RH', false);
      setHTMLElemStyle('display', 'none', 'loader_container', true);
      setHTMLElemStyle('display', 'block', 'volume_btn', true);
      setHTMLElemStyle('visibility', 'visible', 'fullscreen_button', false);
      setHTMLElemStyle('visibility', 'hidden', 'text_Loading', false);
      setHTMLElemStyle('visibility', 'visible', 'begin_btn', false);
      Baudplay = 'true';
      'homebuttondisable';
      EnableHomeButton = 'false';
      setHTMLElemStyle('borderBottom', 'none', 'home', false);
      'selected';
      setHTMLElemStyle('textDecoration', 'none', 'button_SamplePrep', false);
      setHTMLElemStyle('borderBottom', '2px solid rgb(255,143,143)', 'button_SamplePrep', false);
      setHTMLElemStyle('height', '43px', 'button_SamplePrep', false);
      'normal';
      setHTMLElemStyle('borderBottom', 'none', 'button_overview', false);
      setHTMLElemStyle('background', '#E71316', 'button_overview', false);
      setHTMLElemStyle('borderBottom', 'none', 'button_SamplePrepAndDetec', false);
      setHTMLElemStyle('background', '#E71316', 'button_SamplePrepAndDetec', false);
      setHTMLElemStyle('borderBottom', 'none', 'button_DataAnalysis', false);
      setHTMLElemStyle('background', '#E71316', 'button_DataAnalysis', false);
      registerSetTimer('2t', 1, function() {}, 1);
      registerSetTimeout(2, function() {
        bindHTMLObject('Vanquish_Flex_UHPLC_System', 'Vanquish_label', true);
        bindHTMLObject('Sterile_Centrifuge_Tubes', 'Nunc_label', true);
        bindHTMLObject('Drug_Substance_Vail', 'Drug_label', true);
        bindHTMLObject('TSQ Quantis™ Triple_Quadrupole_Mass_Spectrometer', 'Quantis_label', true);
        bindHTMLObject('Cushed_Drug_​Product_Vail', 'Substance_label', true);
        bindHTMLObject('Drug_​Product ', 'C_Drug_label', true);
        bindHTMLObject('Vortex_Mixers', 'Digital_label', true);
        bindHTMLObject('Lab_Shaker ', 'Orbital_label', true);
        bindHTMLObject('Refrigerated_Centrifuge​', 'Centrifuge_label', true);
        bindHTMLObject('Syringe_Filter', 'Titan_label', true);
        bindHTMLObject('Chromeleon_Screen', 'Chromeleon_label', true);
        bindHTMLObject('Finnpipette_Pipette', 'Finnpipette_label', true);
        bindHTMLObject('Click_On_Drug_Substance_Vial', 'vial_instruction', true);
        bindHTMLObject('Cick_On_Finnpipette_Pipette', 'finnpipette_instruction', true);
        bindHTMLObject('Click_On_Centrifuge_Tube', 'product_instruction', true);
        bindHTMLObject('Click_On _Drug_Product_Centrifuge_Tube', 'shaker_instruction', true);
        bindHTMLObject('Click_On_Injection', 'syringe_instruction', true);
        bindHTMLObject('Cilck_On_Autosamplar_Lid', 'autosampler_instruction', true);
        bindHTMLObject('Mixing_Completed', 'mixing_ack_label', true);
        bindHTMLObject('Transfer_Completed', 'transfer_ack_label', true);
        bindHTMLObject('Mixture_Is_Homogenized', 'homogenized_ack_label', true);
        bindHTMLObject('Autosamplar_Tray_Is _Ready', 'Autosampler_ack_label', true);
        bindHTMLObject('USP_4_Reproducibility​', 'Vanquish_description', true);
        bindHTMLObject('Blank_In_HPLC_Tray​', 'Blank_label_v2', true);
        bindHTMLObject('Mobile_Phase', 'Mobile_label', true);
        bindHTMLObject('Standard_Substance_In_HPLC_Tray​', 'Standard_label', true);
        bindHTMLObject('Drug_Substance_In_HPLC_Tray​', 'Substance_label_v31', true);
        bindHTMLObject('Blank_tube', 'Blank_label', true);
        bindHTMLObject('Drug_Product_tube', 'Substance_label_v21', true);
        bindHTMLObject('Drug_substance_tube', 'Drug_label_v21', true);
        bindHTMLObject('Drug_Product_In_HPLC_Tray​', 'Drug_label_v3', true);
        bindHTMLObject('Drug_Substance_Vail', 'SP_label', true);
        changeVis('Anim_Shaker_Tube_Label', false);
      });
    }, function() {}, function() {});
  }, function() {}, function() {});
}, function() {}, function() {});

eventHTMLElem('click', 'logo_btn', false, function(event) {
  loadFile('./links1.csv', function() {
    myTable = readCSV(_pGlob.loadedFile, ',', 0);
    console.log(_pGlob.loadedFile);
    for (var row_index5 in myTable) {
      row = myTable[row_index5];
      if (row[0] == 'Overview') {
        var1 = row.slice(-1)[0];
        console.log(['"',var1,'"'].join(''));
        openWebPage(['',var1,''].join(''), 'SAME');
      }
    }
  });
});

Soverview = 'false';
SSamplePrep = 'false';
SsampleDetect = 'false';
SDataanalysis = 'false';

registerOnHover('DrugSubstance_Clickable', true, function() {
  if (DrugSubsatnceBlink == true) {
    outline('Drug Substance Bottle 1 lable.001', 'ENABLE');
    outline('Drug Substance cap 1.001', 'ENABLE');
  }
}, function() {
  if (DrugSubsatnceBlink == true) {
    outline('Drug Substance Bottle 1 lable.001', 'DISABLE');
    outline('Drug Substance cap 1.001', 'DISABLE');
  }
});

registerOnHover('Mixer_Clickable', true, function() {
  if (MixerBlink == true) {
    outline('Anim_Mixer_TubeCap', 'ENABLE');
    outline('Anim_Mixer_Tube', 'ENABLE');
  }
}, function() {
  if (MixerBlink == true) {
    outline('Anim_Mixer_TubeCap', 'DISABLE');
    outline('Anim_Mixer_Tube', 'DISABLE');
  }
});

registerOnHover('Door_1_trans_net', true, function() {
  if (VanquishBlink == true) {
    outline('Door_1_trans_net', 'ENABLE');
  }
}, function() {
  if (VanquishBlink == true) {
    outline('Door_1_trans_net', 'DISABLE');
  }
});

registerOnHover('Finnpipette_Clickable', true, function() {
  if (FinPippeteBlink == true) {
    outline('PipetteBody', 'ENABLE');
    outline('PipetteTipEjector', 'ENABLE');
    outline('PipetteButton', 'ENABLE');
  }
}, function() {
  if (FinPippeteBlink == true) {
    outline('PipetteBody', 'DISABLE');
    outline('PipetteTipEjector', 'DISABLE');
    outline('PipetteButton', 'DISABLE');
  }
});

registerOnHover('Shaker_Clickable', true, function() {
  if (ShakerBlink == true) {
    outline('Anim_Shaker_Tube', 'ENABLE');
    outline('Anim_Shaker_TubeCap', 'ENABLE');
  }
}, function() {
  if (ShakerBlink == true) {
    outline('Anim_Shaker_Tube', 'DISABLE');
    outline('Anim_Shaker_TubeCap', 'DISABLE');
  }
});

registerOnHover('Syringe_Clickable', true, function() {
  if (SyringeBlink == true) {
    outline('Injection body', 'ENABLE');
    outline('injection plunger', 'ENABLE');
  }
}, function() {
  if (SyringeBlink == true) {
    outline('Injection body', 'DISABLE');
    outline('injection plunger', 'DISABLE');
  }
});

clickonsubmit = 'false';

registerOnClick('DrugSubstance_Clickable', false, false, [0,1,2], function() {
  if (appendstatus == 3) {
    if (playAnim1 == 'true') {
      console.log('drugvialplay');
      changeVis('Anim_DrugSubstance_RH', true);
      changeVis('Anim_DrugSubstance_LH', true);

      operateAnimation('PLAY', getAnimations(['GROUP', 'Anim_DrugSubstance']), null, null, 'LoopOnce', 1.5,
              function() {}, undefined, false);

          registerSetTimer('t5', 15, function() {
        changeVis('Anim_DrugSubstance_RH', false);
        changeVis('Anim_DrugSubstance_LH', false);
        registerSetTimer('t6', 0.5, function() {
          setHTMLElemStyle('visibility', 'visible', 'Substance_label_v21', true);
          setHTMLElemStyle('visibility', 'visible', 'Drug_label_v21', true);
          setHTMLElemStyle('visibility', 'visible', 'Blank_label', true);
          playAud = loadMedia_HTML5('Nitrosamine_VOs/VO_5.mp3');
          playSound(playAud, false);
          Muteunmute();
          registerSetTimer('t7', 7, function() {
            setHTMLElemStyle('visibility', 'hidden', 'Substance_label_v21', true);
            setHTMLElemStyle('visibility', 'hidden', 'Drug_label_v21', true);
            setHTMLElemStyle('visibility', 'hidden', 'Blank_label', true);
            tweenCamera('Sample_Preparation_Animation_2_Position', 'Sample_Preparation_Animation_2_Target', 1, function() {}, 0);
            registerSetTimer('t51', 1, function() {
              // Transfer Complete
              setHTMLElemStyle('visibility', 'visible', 'Finnpipette_label', true);
              playAud = loadMedia_HTML5('Nitrosamine_VOs/VO_6.mp3');
              playSound(playAud, false);
              Muteunmute();
              registerSetTimer('t8', 6, function() {
                // Transfer Complete
                setHTMLElemStyle('visibility', 'hidden', 'Finnpipette_label', true);
                changeVis('Anim_DrugSubstance_Tube', false);
                changeVis('Anim_DrugSubstance_TubeCap', false);
                changeVis('Drug Substance 2', false);
                changeVis('Prefill', false);
                changeVis('Anim_Finnpipette_Tube', true);
                changeVis('Anim_Finnpipette_TubeCap', true);
                changeVis('Anim_Finnpipette_TubeLiquid', true);
                changeVis('Drug Substance 3', true);
                registerSetTimer('ht2', 0.2, function() {
                  // Transfer Complete
                  setHTMLElemStyle('visibility', 'hidden', 'Nunc_label', true);
                  // click on finpippete
                  setHTMLElemStyle('visibility', 'visible', 'finnpipette_instruction', true);
                  registerSetTimer('ct2', 0, function() {
                    playFinpippete = 'true';
                    FinPippeteBlink = true;
                    higlightFinpippete();
                  }, 1);
                }, 1);
              }, 1);
            }, 1);
          }, 1);
        }, 1);
      }, 1);
      // Hide Click on drug substance vial inst
      setHTMLElemStyle('visibility', 'hidden', 'vial_instruction', true);
      playAnim1 = 'false';
      registerSetTimer('h2timer', 0.05, function() {
        DrugSubsatnceBlink = false;
        stophighlighrDrugSubstance();
      }, 1);
      registerRemoveTimer('ct1');
    }
  }
}, function() {});

playFinpippete = 'false';
playLabshakerAnim = 'false';
playSyringAnim = 'false';
playAnim1 = 'false';
mixerAnimation = 'false';

registerOnClick('Finnpipette_Clickable', false, false, [0,1,2], function() {
  if (appendstatus == 3) {
    if (playFinpippete == 'true') {
      console.log('finpippeteplay');

      operateAnimation('PLAY', getAnimations(['GROUP', 'Anim_Finnpipette']), null, null, 'LoopOnce', 1.5,
              function() {}, undefined, false);

          changeVis('Anim_Finnpipette_RH', true);
      changeVis('Anim_Finnpipette_LH', true);
      registerSetTimer('t9', 30, function() {
        changeVis('Anim_Finnpipette_LH', false);
        changeVis('Anim_Finnpipette_RH', false);
        // Before Mixer Animation
        changeVis('Anim_Mixer_Tube', true);
        changeVis('Anim_Mixer_TubeCap', true);
        changeVis('Anim_Mixer_TubeLiquid', true);
        changeVis('Anim_Finnpipette_Tube', false);
        changeVis('Anim_Finnpipette_TubeCap', false);
        changeVis('Anim_Finnpipette_TubeLiquid', false);
        changeVis(['GROUP', 'vortex_mixer_Tubes'], true);
        tweenCamera('Sample_Preparation_Animation_3_Position', 'Sample_Preparation_Animation_3_Target', 1, function() {}, 0);
        registerSetTimer('t52', 1, function() {
          // vortexmixer label
          setHTMLElemStyle('visibility', 'visible', 'Digital_label', true);
          playAud = loadMedia_HTML5('Nitrosamine_VOs/VO_7.mp3');
          playSound(playAud, false);
          Muteunmute();
          registerSetTimer('t10', 7, function() {
            // Hide vortexmixer label
            setHTMLElemStyle('visibility', 'hidden', 'Digital_label', true);
            playAud = loadMedia_HTML5('Nitrosamine_VOs/VO_7.1.mp3');
            // vortexmixer label
            setHTMLElemStyle('visibility', 'visible', 'product_instruction', true);
            playSound(playAud, false);
            Muteunmute();
            registerSetTimer('ct3', 4, function() {
              mixerAnimation = 'true';
              MixerBlink = true;
              highlightMixer();
            }, 1);
          }, 1);
        }, 1);
      }, 1);
      playFinpippete = 'false';
      registerSetTimer('h4timer', 0.05, function() {
        FinPippeteBlink = false;
        stophighlightfinpip();
      }, 1);
      registerRemoveTimer('ct2');
      // click on finpippete
      setHTMLElemStyle('visibility', 'hidden', 'finnpipette_instruction', true);
    }
  }
}, function() {});

eventHTMLElem('click', 'begin_btn', false, function(event) {
  setHTMLElemStyle('visibility', 'hidden', 'LoadingPage', false);
  setHTMLElemStyle('visibility', 'hidden', 'begin_btn', false);
  setHTMLElemStyle('display', 'block', 'footer_div', false);
  samplePrep2();
  BaudioSource = loadMedia_HTML5('./BackgroundMusic.mp3');
  playSound(BaudioSource, true);
  volume(BaudioSource, 0.04);
  Muteunmute();
  var VARS = Object.defineProperties({}, {
    "startclick": { get: function() { return startclick; }, set: function(val) { startclick = val; } },
    "appendstatus": { get: function() { return appendstatus; }, set: function(val) { appendstatus = val; } },
    "Soverview": { get: function() { return Soverview; }, set: function(val) { Soverview = val; } },
    "once": { get: function() { return once; }, set: function(val) { once = val; } },
    "clickonsubmit": { get: function() { return clickonsubmit; }, set: function(val) { clickonsubmit = val; } },
    "playAnim1": { get: function() { return playAnim1; }, set: function(val) { playAnim1 = val; } },
    "SSamplePrep": { get: function() { return SSamplePrep; }, set: function(val) { SSamplePrep = val; } },
    "EnableHomeButton": { get: function() { return EnableHomeButton; }, set: function(val) { EnableHomeButton = val; } },
    "playFinpippete": { get: function() { return playFinpippete; }, set: function(val) { playFinpippete = val; } },
    "myTable": { get: function() { return myTable; }, set: function(val) { myTable = val; } },
    "Baudplay": { get: function() { return Baudplay; }, set: function(val) { Baudplay = val; } },
    "SsampleDetect": { get: function() { return SsampleDetect; }, set: function(val) { SsampleDetect = val; } },
    "experienceStart": { get: function() { return experienceStart; }, set: function(val) { experienceStart = val; } },
    "set": { get: function() { return set; }, set: function(val) { set = val; } },
    "mixerAnimation": { get: function() { return mixerAnimation; }, set: function(val) { mixerAnimation = val; } },
    "SDataanalysis": { get: function() { return SDataanalysis; }, set: function(val) { SDataanalysis = val; } },
    "toggleAudio": { get: function() { return toggleAudio; }, set: function(val) { toggleAudio = val; } },
    "playAud": { get: function() { return playAud; }, set: function(val) { playAud = val; } },
    "Control": { get: function() { return Control; }, set: function(val) { Control = val; } },
    "DrugSubsatnceBlink": { get: function() { return DrugSubsatnceBlink; }, set: function(val) { DrugSubsatnceBlink = val; } },
    "FinPippeteBlink": { get: function() { return FinPippeteBlink; }, set: function(val) { FinPippeteBlink = val; } },
    "MixerBlink": { get: function() { return MixerBlink; }, set: function(val) { MixerBlink = val; } },
    "ShakerBlink": { get: function() { return ShakerBlink; }, set: function(val) { ShakerBlink = val; } },
    "SyringeBlink": { get: function() { return SyringeBlink; }, set: function(val) { SyringeBlink = val; } },
    "VanquishBlink": { get: function() { return VanquishBlink; }, set: function(val) { VanquishBlink = val; } },
    "playLabshakerAnim": { get: function() { return playLabshakerAnim; }, set: function(val) { playLabshakerAnim = val; } },
    "row": { get: function() { return row; }, set: function(val) { row = val; } },
    "BaudioSource": { get: function() { return BaudioSource; }, set: function(val) { BaudioSource = val; } },
    "playSyringAnim": { get: function() { return playSyringAnim; }, set: function(val) { playSyringAnim = val; } },
    "playVanquishAnim": { get: function() { return playVanquishAnim; }, set: function(val) { playVanquishAnim = val; } },
    "readReport": { get: function() { return readReport; }, set: function(val) { readReport = val; } },
    "var1": { get: function() { return var1; }, set: function(val) { var1 = val; } },
    "createNewSeq": { get: function() { return createNewSeq; }, set: function(val) { createNewSeq = val; } },
    "HighlightRecovery": { get: function() { return HighlightRecovery; }, set: function(val) { HighlightRecovery = val; } },
});

  Function('app', 'v3d', 'VARS', 'PROC', (('console.log("Testing google analytics api\'s");' + '\n' +
  '_gaq.push([\'_trackEvent\', \'button\', \'clicked\']);')))(appInstance, v3d, VARS, PROC);

});

registerOnClick('Mixer_Clickable', false, false, [0,1,2], function() {
  if (appendstatus == 3) {
    if (mixerAnimation == 'true') {
      console.log('mixeranimplay');

      operateAnimation('PLAY', getAnimations(['GROUP', 'Anim_Mixer']), null, null, 'LoopOnce', 1.5,
              function() {
        changeVis('Anim_Mixer_RH', false);
        registerSetTimer('t11', 0.5, function() {
          tweenCamera('Sample_preparation_Animation_close_up_Position_4.1', 'Sample_preparation_Animation_close_up_Target_4.1', 1, function() {}, 0);
          registerSetTimer('t53', 1, function() {
            changeVis('Anim_Shaker_Tube_Label', true);
            setHTMLElemStyle('visibility', 'visible', 'Orbital_label', true);
            Muteunmute();
            playAud = loadMedia_HTML5('Nitrosamine_VOs/VO_7a.mp3');
            playSound(playAud, false);
            Muteunmute();
            registerSetTimer('t12', 7, function() {
              changeVis('Anim_Mixer_Tube', false);
              changeVis('Anim_Mixer_TubeCap', false);
              changeVis('Anim_Mixer_TubeLiquid', false);
              setHTMLElemStyle('visibility', 'hidden', 'Orbital_label', true);
              setHTMLElemStyle('visibility', 'visible', 'shaker_instruction', true);
              playAud = loadMedia_HTML5('Nitrosamine_VOs/VO_8.mp3');
              playSound(playAud, false);
              Muteunmute();
              registerSetTimer('ct4', 3, function() {
                ShakerBlink = true;
                playLabshakerAnim = 'true';
                highlightShaker();
              }, 1);
            }, 1);
          }, 1);
          // Before shaker anim play
          changeVis('Anim_Shaker_Tube', true);
          changeVis('Anim_Shaker_TubeLiquid', true);
          changeVis('Anim_Shaker_TubeCap', true);
        }, 1);
      }, undefined, false);

          changeVis('Anim_Mixer_RH', true);
      mixerAnimation = 'false';
      // vortexmixer label
      setHTMLElemStyle('visibility', 'hidden', 'product_instruction', true);
      registerSetTimer('h6timer', 0.05, function() {
        MixerBlink = false;
        stopHighlightmixer();
      }, 1);
      registerSetTimer('rpm2', 6, function() {
        replaceTexture('VorexMixer', 'VortexMixer_CLR_01.JPG', 'Models/Sample-Preparation/VortexMixer_CLR_02.JPG', function() {});
        registerSetTimer('rpm3', 3, function() {
          replaceTexture('VorexMixer', 'VortexMixer_CLR_01.JPG', 'Models/Sample-Preparation/VortexMixer_CLR_01.JPG', function() {});
        }, 1);
      }, 1);
      registerRemoveTimer('ct4');
    }
  }
}, function() {});

registerOnClick('Shaker_Clickable', false, false, [0,1,2], function() {
  if (appendstatus == 3) {
    if (playLabshakerAnim == 'true') {
      console.log('labshakerplay');

      operateAnimation('PLAY', getAnimations(['GROUP', 'Anim_Shaker']), null, null, 'LoopOnce', 1.5,
              function() {
        changeVis('Anim_Shaker_RH', false);
        replaceTexture('LabShaker_MAT.001', 'LabShaker_CLR_01.JPG', 'Models/Sample-Preparation/LabShaker_CLR_01.JPG', function() {});
        registerSetTimer('t13', 1, function() {
          changeVis('Anim_DrugSubstance_LH', false);
          changeVis('Anim_DrugSubstance_RH', false);
          registerSetTimer('t14', 0.5, function() {
            tweenCamera('Sample_Preparation_Animation_4_Position', 'Sample_Preparation_Animation_4_Target', 1, function() {}, 0);
            registerSetTimer('t54', 1, function() {
              playAud = loadMedia_HTML5('Nitrosamine_VOs/VO_9.mp3');
              playSound(playAud, false);
              Muteunmute();
              setHTMLElemStyle('visibility', 'visible', 'Centrifuge_label', true);
              registerSetTimer('t15', 6, function() {
                setHTMLElemStyle('visibility', 'hidden', 'Centrifuge_label', true);
                changeVis(['GROUP', 'Syringe_Tubes'], true);
                tweenCamera('Sample_Preparation_Animation_5_Position', 'Sample_Preparation_Animation_5_Target', 1, function() {}, 0);
                registerSetTimer('t55', 1, function() {
                  setHTMLElemStyle('visibility', 'visible', 'Titan_label', true);
                  playAud = loadMedia_HTML5('Nitrosamine_VOs/VO_10.mp3');
                  playSound(playAud, false);
                  Muteunmute();
                  registerSetTimer('t16', 8, function() {
                    setHTMLElemStyle('visibility', 'hidden', 'Titan_label', true);
                    setHTMLElemStyle('visibility', 'visible', 'syringe_instruction', true);
                    registerSetTimer('ct5', 0.5, function() {
                      playSyringAnim = 'true';
                      SyringeBlink = true;
                      highlightSyringe();
                    }, 1);
                  }, 1);
                }, 1);
                changeVis('Anim_Shaker_Tube', false);
                changeVis('Anim_Shaker_TubeCap', false);
                changeVis('Anim_Shaker_TubeLiquid', false);
                // before syringe anim play
                changeVis('Anim_Syringe_TubeCap', true);
                changeVis('Anim_Syringe_TubeLiquid', true);
                changeVis('Anim_Syringe_Tube', true);
              }, 1);
            }, 1);
          }, 1);
        }, 1);
      }, undefined, false);

          changeVis('Anim_Shaker_RH', true);
      playLabshakerAnim = 'false';
      setHTMLElemStyle('visibility', 'hidden', 'shaker_instruction', true);
      registerSetTimer('h8timer', 0.05, function() {
        ShakerBlink = false;
        stopHighlightShaker();
      }, 1);
      registerSetTimer('rpm1', 5.5, function() {
        replaceTexture('LabShaker_MAT.001', 'LabShaker_CLR_01.JPG', 'Models/Sample-Preparation/LabShaker_CLR_02.JPG', function() {});
      }, 1);
      registerRemoveTimer('ct3');
    }
  }
}, function() {});

registerOnClick('Syringe_Clickable', false, false, [0,1,2], function() {
  if (appendstatus == 3) {
    if (playSyringAnim == 'true') {
      console.log('syringanimplay');

      operateAnimation('PLAY', getAnimations(['GROUP', 'Anim_Syringe']), null, null, 'LoopOnce', 1.3,
              function() {
        changeVis('Anim_Syringe_RH', false);
        changeVis('Anim_Syringe_LH', false);
        registerSetTimer('t17', 0.5, function() {
          playAud = loadMedia_HTML5('Nitrosamine_VOs/VO_14_a.mp3');
          playSound(playAud, false);
          Muteunmute();
          registerSetTimer('t43', 3, function() {
            playAud = loadMedia_HTML5('Nitrosamine_VOs/VO_11_a.mp3');
            playSound(playAud, false);
            Muteunmute();
            registerSetTimer('trans3Timer', 6, function() {
              loadFile('./links1.csv', function() {
                myTable = readCSV(_pGlob.loadedFile, ',', 0);
                console.log(_pGlob.loadedFile);
                for (var row_index6 in myTable) {
                  row = myTable[row_index6];
                  if (row[0] == 'SampleDetect') {
                    var1 = row.slice(-1)[0];
                    console.log(['"',var1,'"'].join(''));
                    openWebPage(['',var1,''].join(''), 'SAME');
                  }
                }
              });
            }, 1);
          }, 1);
        }, 1);
      }, undefined, false);

          changeVis('Anim_Syringe_RH', true);
      changeVis('Anim_Syringe_LH', true);
      playSyringAnim = 'false';
      setHTMLElemStyle('visibility', 'hidden', 'syringe_instruction', true);
      registerSetTimer('h10timer', 0.05, function() {
        SyringeBlink = false;
        stophighlightSyringe();
      }, 1);
      registerRemoveTimer('ct5');
    }
  }
}, function() {});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
